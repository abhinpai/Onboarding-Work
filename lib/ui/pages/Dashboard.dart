import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'package:flutter/material.dart';
import 'package:onboarding/model/data_model.dart';
import 'package:onboarding/services/onboardingAPI.dart';
import 'package:onboarding/ui/widgets/ChartWidget.dart';
import 'package:onboarding/ui/widgets/OnboardTimeWidget.dart';
import 'package:onboarding/ui/widgets/SiteDataWidget.dart';
import 'package:onboarding/ui/widgets/StageAnalysisWidget.dart';

class Dashboard extends StatefulWidget {
  final String siteId;
  Dashboard(this.siteId);
  @override
  _DashboardState createState() => _DashboardState(this.siteId);
}

class _DashboardState extends State<Dashboard> {
  String siteId;
  VoidCallback onBackPress;
  _DashboardState(this.siteId);
  List<Stage> stageDatas = [];

  @override
  initState() {
    super.initState();
    // this.getSiteStatus();

    onBackPress = () {
      Navigator.of(context).pop();
    };
  }

  Future getSiteStatus() async {
    final url = 'https://onboardtracker.free.beeceptor.com';
    final response = await http.get(url);
    if (response.statusCode == 200) {
      var jsonData = json.decode(response.body);
      // print(jsonData['data']);

      for (var i in jsonData['analysis']['stages']) {
        // Stage stage = Stage(i['']);
        // print(i);
        Stage stage = Stage(i['name'], i['predicted'], i['actual']);
        this.stageDatas.add(stage);
      }
      // return DataModel.fromJson(json.decode(response.body));
    } else {
      throw Exception('Failed to site data');
    }
  }

  Future<DataModel> _getData() async {
    final url = 'https://onboardtracker.free.beeceptor.com';
    final response = await http.get(url);
    if (response.statusCode == 200) {
      var jsonData = json.decode(response.body);
      return DataModel.fromJson(jsonData);

      // for (var i in jsonData['data']['analysis']['stages']) {
      //   // Stage stage = Stage(i['']);
      //   // print(i);
      //   Stage stage = Stage(i['name'], i['predicted'], i['actual']);
      //   this.stageDatas.add(stage);
      // }
      // return DataModel.fromJson(json.decode(response.body));
    } else {
      throw Exception('Failed to site data');
    }
  }

  @override
  Widget build(BuildContext context) {
    print(this.stageDatas);
    return Scaffold(
        appBar: AppBar(
          elevation: 0,
          backgroundColor: Colors.transparent,
          leading: IconButton(
            color: Colors.black,
            icon: Icon(Icons.arrow_back),
            onPressed: onBackPress,
          ),
        ),
        // body: ListView(
        //   padding: EdgeInsets.fromLTRB(28.0, 0, 28.0, 0),
        //   physics: BouncingScrollPhysics(),
        //   shrinkWrap: true,
        //   children: <Widget>[
        //     SiteDataWidget(),
        //     SizedBox(height: 20.0),
        //     ChartWidhget(),
        //     SizedBox(height: 20.0),
        //     OnboardTimeWidget(),
        //     SizedBox(height: 20.0),
        //     StageAnalysisWidget(this.stageDatas)
        //   ],
        // ));
        body: Container(
          child: FutureBuilder(
            future: _getData(),
            builder: (BuildContext context, AsyncSnapshot snap) {
              if (snap.data == null) {
                return Center(child: CircularProgressIndicator());
              } else {
                print(snap.data.siteName);
                return ListView(
                  padding: EdgeInsets.fromLTRB(28.0, 0, 28.0, 0),
                  physics: BouncingScrollPhysics(),
                  shrinkWrap: true,
                  children: <Widget>[
                    SiteDataWidget(snap.data.siteName, snap.data.siteId, snap.data.systemType),
                    SizedBox(height: 20.0),
                    ChartWidhget(),
                    SizedBox(height: 20.0),
                    OnboardTimeWidget(snap.data.analysis),
                    SizedBox(height: 20.0),
                    StageAnalysisWidget(snap.data.analysis.stages)
                  ],
                );
              }
            },
          ),
        ));
  }


  _mapStages(stages){
    var autogenerated = Autogenerated(stages: stages);
    return autogenerated;
  }
}




class Stage {
  final String name;
  final String predicted;
  final String actual;

  Stage(this.name, this.predicted, this.actual);
}


class Autogenerated {
  List<Stages> stages;

  Autogenerated({this.stages});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    if (json['stages'] != null) {
      stages = new List<Stages>();
      json['stages'].forEach((v) {
        stages.add(new Stages.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    if (this.stages != null) {
      data['stages'] = this.stages.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class Stages {
  String name;
  String predicted;
  String actual;

  Stages({this.name, this.predicted, this.actual});

  Stages.fromJson(Map<String, dynamic> json) {
    name = json['name'];
    predicted = json['predicted'];
    actual = json['actual'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['name'] = this.name;
    data['predicted'] = this.predicted;
    data['actual'] = this.actual;
    return data;
  }
}